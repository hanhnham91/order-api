// Code generated by mockery v2.46.3. DO NOT EDIT.

package mockusecaseorder

import (
	context "context"

	entity "github.com/hanhnham91/order-service/entity"
	payload "github.com/hanhnham91/order-service/payload"
	mock "github.com/stretchr/testify/mock"
)

// MockIOrderCreateUseCase is an autogenerated mock type for the IOrderCreateUseCase type
type MockIOrderCreateUseCase struct {
	mock.Mock
}

type MockIOrderCreateUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIOrderCreateUseCase) EXPECT() *MockIOrderCreateUseCase_Expecter {
	return &MockIOrderCreateUseCase_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, req
func (_m *MockIOrderCreateUseCase) Execute(ctx context.Context, req payload.CreateOrderRequest) (*entity.Order, []entity.Product, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *entity.Order
	var r1 []entity.Product
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, payload.CreateOrderRequest) (*entity.Order, []entity.Product, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, payload.CreateOrderRequest) *entity.Order); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, payload.CreateOrderRequest) []entity.Product); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]entity.Product)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, payload.CreateOrderRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIOrderCreateUseCase_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockIOrderCreateUseCase_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - req payload.CreateOrderRequest
func (_e *MockIOrderCreateUseCase_Expecter) Execute(ctx interface{}, req interface{}) *MockIOrderCreateUseCase_Execute_Call {
	return &MockIOrderCreateUseCase_Execute_Call{Call: _e.mock.On("Execute", ctx, req)}
}

func (_c *MockIOrderCreateUseCase_Execute_Call) Run(run func(ctx context.Context, req payload.CreateOrderRequest)) *MockIOrderCreateUseCase_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(payload.CreateOrderRequest))
	})
	return _c
}

func (_c *MockIOrderCreateUseCase_Execute_Call) Return(_a0 *entity.Order, _a1 []entity.Product, _a2 error) *MockIOrderCreateUseCase_Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIOrderCreateUseCase_Execute_Call) RunAndReturn(run func(context.Context, payload.CreateOrderRequest) (*entity.Order, []entity.Product, error)) *MockIOrderCreateUseCase_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIOrderCreateUseCase creates a new instance of MockIOrderCreateUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIOrderCreateUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIOrderCreateUseCase {
	mock := &MockIOrderCreateUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
