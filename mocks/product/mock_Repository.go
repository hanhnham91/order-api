// Code generated by mockery v2.46.3. DO NOT EDIT.

package mockproduct

import (
	context "context"

	entity "github.com/hanhnham91/order-service/entity"
	specifications "github.com/hanhnham91/order-service/repository/specifications"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, data
func (_m *MockRepository) Create(ctx context.Context, data *entity.Product) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Product) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - data *entity.Product
func (_e *MockRepository_Expecter) Create(ctx interface{}, data interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create", ctx, data)}
}

func (_c *MockRepository_Create_Call) Run(run func(ctx context.Context, data *entity.Product)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Product))
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(_a0 error) *MockRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(context.Context, *entity.Product) error) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, spec
func (_m *MockRepository) Find(ctx context.Context, spec specifications.I) ([]entity.Product, error) {
	ret := _m.Called(ctx, spec)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 []entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, specifications.I) ([]entity.Product, error)); ok {
		return rf(ctx, spec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, specifications.I) []entity.Product); ok {
		r0 = rf(ctx, spec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, specifications.I) error); ok {
		r1 = rf(ctx, spec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockRepository_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - spec specifications.I
func (_e *MockRepository_Expecter) Find(ctx interface{}, spec interface{}) *MockRepository_Find_Call {
	return &MockRepository_Find_Call{Call: _e.mock.On("Find", ctx, spec)}
}

func (_c *MockRepository_Find_Call) Run(run func(ctx context.Context, spec specifications.I)) *MockRepository_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(specifications.I))
	})
	return _c
}

func (_c *MockRepository_Find_Call) Return(_a0 []entity.Product, _a1 error) *MockRepository_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Find_Call) RunAndReturn(run func(context.Context, specifications.I) ([]entity.Product, error)) *MockRepository_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields: ctx
func (_m *MockRepository) FindAll(ctx context.Context) ([]entity.Product, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.Product, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) FindAll(ctx interface{}) *MockRepository_FindAll_Call {
	return &MockRepository_FindAll_Call{Call: _e.mock.On("FindAll", ctx)}
}

func (_c *MockRepository_FindAll_Call) Run(run func(ctx context.Context)) *MockRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepository_FindAll_Call) Return(_a0 []entity.Product, _a1 error) *MockRepository_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_FindAll_Call) RunAndReturn(run func(context.Context) ([]entity.Product, error)) *MockRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, spec
func (_m *MockRepository) Get(ctx context.Context, spec specifications.I) (entity.Product, error) {
	ret := _m.Called(ctx, spec)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, specifications.I) (entity.Product, error)); ok {
		return rf(ctx, spec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, specifications.I) entity.Product); ok {
		r0 = rf(ctx, spec)
	} else {
		r0 = ret.Get(0).(entity.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, specifications.I) error); ok {
		r1 = rf(ctx, spec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - spec specifications.I
func (_e *MockRepository_Expecter) Get(ctx interface{}, spec interface{}) *MockRepository_Get_Call {
	return &MockRepository_Get_Call{Call: _e.mock.On("Get", ctx, spec)}
}

func (_c *MockRepository_Get_Call) Run(run func(ctx context.Context, spec specifications.I)) *MockRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(specifications.I))
	})
	return _c
}

func (_c *MockRepository_Get_Call) Return(_a0 entity.Product, _a1 error) *MockRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Get_Call) RunAndReturn(run func(context.Context, specifications.I) (entity.Product, error)) *MockRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
